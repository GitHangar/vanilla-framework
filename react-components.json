{
  "accordion": {
    "name": "Accordion",
    "stories": [
      {
        "id": "accordion--default-story",
        "name": "Default"
      },
      {
        "id": "accordion--external-state",
        "name": "External state"
      },
      {
        "id": "accordion--headings",
        "name": "Headings"
      }
    ],
    "props": [
      {
        "name": "sections",
        "description": "An array of sections and content.",
        "type": "Section[]",
        "required": true,
        "defaultValue": null
      },
      {
        "name": "className",
        "description": "Optional classes applied to the parent element.",
        "type": "string",
        "required": false,
        "defaultValue": null
      },
      {
        "name": "expanded",
        "description": "An optional value to set the expanded section. The value must match a\nsection key. This value will only set the expanded section on first render\nif externallyControlled is not set to `true`.",
        "type": "string",
        "required": false,
        "defaultValue": null
      },
      {
        "name": "externallyControlled",
        "description": "Whether the expanded section will be controlled via external state.",
        "type": "boolean",
        "required": false,
        "defaultValue": null
      },
      {
        "name": "onExpandedChange",
        "description": "Optional function that is called when the expanded section is changed.\nThe function is provided the section title or null.",
        "type": "(id: any, title: string) => void",
        "required": false,
        "defaultValue": null
      },
      {
        "name": "titleElement",
        "description": "Optional string describing heading element that should be used for the section titles.",
        "type": "\"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\"",
        "required": false,
        "defaultValue": null
      }
    ]
  },
  "actionbutton": {
    "name": "ActionButton",
    "stories": [
      {
        "id": "actionbutton--default-story",
        "name": "Default"
      },
      {
        "id": "actionbutton--loading",
        "name": "Loading"
      }
    ],
    "props": [
      {
        "name": "appearance",
        "description": "The appearance of the button.",
        "type": "string",
        "required": false,
        "defaultValue": null
      },
      {
        "name": "children",
        "description": "The content of the button.",
        "type": "ReactNode",
        "required": false,
        "defaultValue": null
      },
      {
        "name": "className",
        "description": "Optional class(es) to pass to the button element.",
        "type": "string",
        "required": false,
        "defaultValue": null
      },
      {
        "name": "disabled",
        "description": "Whether the button should be disabled.",
        "type": "boolean",
        "required": false,
        "defaultValue": "false"
      },
      {
        "name": "inline",
        "description": "Whether the button should display inline.",
        "type": "boolean",
        "required": false,
        "defaultValue": "false"
      },
      {
        "name": "loading",
        "description": "Whether the button should be in the loading state.",
        "type": "boolean",
        "required": false,
        "defaultValue": "false"
      },
      {
        "name": "success",
        "description": "Whether the button should be in the success state.",
        "type": "boolean",
        "required": false,
        "defaultValue": "false"
      }
    ]
  },
  "articlepagination": {
    "name": "ArticlePagination",
    "stories": [
      {
        "id": "articlepagination--default-story",
        "name": "Default"
      }
    ],
    "props": [
      {
        "name": "nextLabel",
        "description": "The label for the next link.",
        "type": "string",
        "required": false,
        "defaultValue": null
      },
      {
        "name": "nextURL",
        "description": "The URL for the next link.",
        "type": "string",
        "required": false,
        "defaultValue": null
      },
      {
        "name": "previousLabel",
        "description": "The label for the previous link.",
        "type": "string",
        "required": false,
        "defaultValue": null
      },
      {
        "name": "previousURL",
        "description": "The URL for the previous link.",
        "type": "string",
        "required": false,
        "defaultValue": null
      },
      {
        "name": "className",
        "description": "Optional classes to add to the wrapping element.",
        "type": "string",
        "required": false,
        "defaultValue": null
      }
    ]
  },
  "button": {
    "name": "Button",
    "stories": [
      {
        "id": "button--default-story",
        "name": "Default"
      },
      {
        "id": "button--default-disabled",
        "name": "Default disabled"
      },
      {
        "id": "button--base",
        "name": "Base"
      },
      {
        "id": "button--base-disabled",
        "name": "Base disabled"
      },
      {
        "id": "button--link",
        "name": "Link"
      },
      {
        "id": "button--link-disabled",
        "name": "Link disabled"
      },
      {
        "id": "button--positive",
        "name": "Positive"
      },
      {
        "id": "button--positive-disabled",
        "name": "Positive disabled"
      },
      {
        "id": "button--negative",
        "name": "Negative"
      },
      {
        "id": "button--negative-disabled",
        "name": "Negative disabled"
      },
      {
        "id": "button--brand",
        "name": "Brand"
      },
      {
        "id": "button--brand-disabled",
        "name": "Brand disabled"
      },
      {
        "id": "button--inline",
        "name": "Inline"
      },
      {
        "id": "button--dense",
        "name": "Dense"
      },
      {
        "id": "button--small",
        "name": "Small"
      },
      {
        "id": "button--icon",
        "name": "Icon"
      },
      {
        "id": "button--icon-text",
        "name": "Icon & text"
      }
    ],
    "props": [
      {
        "name": "children",
        "description": "The content of the button.",
        "type": "ReactNode",
        "required": false,
        "defaultValue": null
      },
      {
        "name": "appearance",
        "description": "The appearance of the button.",
        "type": "string",
        "required": false,
        "defaultValue": null
      },
      {
        "name": "className",
        "description": "Optional class(es) to pass to the button element.",
        "type": "string",
        "required": false,
        "defaultValue": null
      },
      {
        "name": "dense",
        "description": "Whether the button should have dense padding.",
        "type": "boolean",
        "required": false,
        "defaultValue": null
      },
      {
        "name": "disabled",
        "description": "Whether the button should be disabled.",
        "type": "boolean",
        "required": false,
        "defaultValue": null
      },
      {
        "name": "element",
        "description": "Optional element or component to use instead of `button`.",
        "type": "ElementType<any> | ComponentType<P>",
        "required": false,
        "defaultValue": null
      },
      {
        "name": "hasIcon",
        "description": "Whether the button has an icon in the content.",
        "type": "boolean",
        "required": false,
        "defaultValue": null
      },
      {
        "name": "inline",
        "description": "Whether the button should display inline.",
        "type": "boolean",
        "required": false,
        "defaultValue": null
      },
      {
        "name": "onClick",
        "description": "Function for handling button click event.",
        "type": "MouseEventHandler<HTMLButtonElement>",
        "required": false,
        "defaultValue": null
      },
      {
        "name": "small",
        "description": "Whether the button should be small.",
        "type": "boolean",
        "required": false,
        "defaultValue": null
      }
    ]
  },
  "card": {
    "name": "Card",
    "stories": [
      {
        "id": "card--default-story",
        "name": "Default"
      },
      {
        "id": "card--header",
        "name": "Header"
      },
      {
        "id": "card--highlighted",
        "name": "Highlighted"
      },
      {
        "id": "card--overlay",
        "name": "Overlay"
      }
    ],
    "props": [
      {
        "name": "children",
        "description": "The content of the card.",
        "type": "ReactNode",
        "required": false,
        "defaultValue": null
      },
      {
        "name": "title",
        "description": "The title of the card.",
        "type": "ReactNode",
        "required": false,
        "defaultValue": null
      },
      {
        "name": "className",
        "description": "Optional class(es) to pass to the wrapping div element.",
        "type": "string",
        "required": false,
        "defaultValue": null
      },
      {
        "name": "highlighted",
        "description": "Whether the card should have highlighted styling.",
        "type": "boolean",
        "required": false,
        "defaultValue": null
      },
      {
        "name": "overlay",
        "description": "Whether the card should have overlay styling.",
        "type": "boolean",
        "required": false,
        "defaultValue": null
      },
      {
        "name": "thumbnail",
        "description": "The path to a thumbnail image.",
        "type": "string",
        "required": false,
        "defaultValue": null
      }
    ]
  },
  "checkboxinput": {
    "name": "CheckboxInput",
    "stories": [
      {
        "id": "checkboxinput--default-story",
        "name": "Default"
      },
      {
        "id": "checkboxinput--children",
        "name": "Children"
      },
      {
        "id": "checkboxinput--disabled",
        "name": "Disabled"
      },
      {
        "id": "checkboxinput--required",
        "name": "Required"
      },
      {
        "id": "checkboxinput--inline",
        "name": "Inline"
      },
      {
        "id": "checkboxinput--indeterminate",
        "name": "Indeterminate"
      }
    ],
    "props": [
      {
        "name": "label",
        "description": "The label for the input element.",
        "type": "ReactNode",
        "required": true,
        "defaultValue": null
      },
      {
        "name": "labelClassName",
        "description": "Optional class(es) to pass to the label element.",
        "type": "string",
        "required": false,
        "defaultValue": null
      },
      {
        "name": "inline",
        "description": "Ensures the input and the label text are properly aligned with other inline text.",
        "type": "boolean",
        "required": false,
        "defaultValue": null
      },
      {
        "name": "indeterminate",
        "description": "Whether the input element should display in indeterminate state.",
        "type": "boolean",
        "required": false,
        "defaultValue": "false"
      }
    ]
  },
  "chip": {
    "name": "Chip",
    "stories": [
      {
        "id": "chip--default-story",
        "name": "Default"
      },
      {
        "id": "chip--lead-value",
        "name": "Lead-value"
      },
      {
        "id": "chip--appearance",
        "name": "Appearance"
      },
      {
        "id": "chip--dismissible",
        "name": "Dismissible"
      }
    ],
    "props": [
      {
        "name": "value",
        "description": "The value of the chip.",
        "type": "string",
        "required": true,
        "defaultValue": null
      },
      {
        "name": "appearance",
        "description": "The appearance of the chip.",
        "type": "\"caution\" | \"information\" | \"negative\" | \"positive\"",
        "required": false,
        "defaultValue": null
      },
      {
        "name": "lead",
        "description": "The lead for the chip.",
        "type": "string",
        "required": false,
        "defaultValue": "\"\""
      },
      {
        "name": "onClick",
        "description": "Function for handling chip div click event.",
        "type": "(event: MouseEvent<HTMLButtonElement, MouseEvent> | { lead: string; value: string; }) => void",
        "required": false,
        "defaultValue": null
      },
      {
        "name": "onDismiss",
        "description": "Function for handling dismissing a chip.",
        "type": "() => void",
        "required": false,
        "defaultValue": null
      },
      {
        "name": "selected",
        "description": "Whether the chip is selected.",
        "type": "boolean",
        "required": false,
        "defaultValue": null
      },
      {
        "name": "subString",
        "description": "A substring to emphasise if it is part of the chip's value,\ne.g. \"sit\" => poSITive",
        "type": "string",
        "required": false,
        "defaultValue": "\"\""
      },
      {
        "name": "quoteValue",
        "description": "Whether to wrap the value in quotation marks.",
        "type": "boolean",
        "required": false,
        "defaultValue": null
      }
    ]
  },
  "codesnippet": {
    "name": "CodeSnippet",
    "stories": [
      {
        "id": "codesnippet--default-story",
        "name": "Default"
      },
      {
        "id": "codesnippet--title",
        "name": "Title"
      },
      {
        "id": "codesnippet--multiple-blocks",
        "name": "Multiple blocks"
      },
      {
        "id": "codesnippet--appearance",
        "name": "Appearance"
      },
      {
        "id": "codesnippet--wrap-lines",
        "name": "Wrap lines"
      },
      {
        "id": "codesnippet--dropdown",
        "name": "Dropdown"
      },
      {
        "id": "codesnippet--dropdowns",
        "name": "Dropdowns"
      },
      {
        "id": "codesnippet--dropdowns-stacked",
        "name": "DropdownsStacked"
      },
      {
        "id": "codesnippet--content",
        "name": "Content"
      }
    ],
    "props": [
      {
        "name": "className",
        "description": "Optional class(es) to pass to the wrapping div element.",
        "type": "string",
        "required": false,
        "defaultValue": null
      },
      {
        "name": "blocks",
        "description": "A list of code blocks to display.",
        "type": "Props[]",
        "required": true,
        "defaultValue": null
      }
    ]
  },
  "col": {
    "name": "Col",
    "stories": [
      {
        "id": "col--default-story",
        "name": "Default"
      },
      {
        "id": "col--grid",
        "name": "Grid"
      },
      {
        "id": "col--nested-columns",
        "name": "Nested columns"
      },
      {
        "id": "col--empty-columns",
        "name": "Empty columns"
      }
    ],
    "props": [
      {
        "name": "children",
        "description": "The content of the column.",
        "type": "ReactNode",
        "required": false,
        "defaultValue": null
      },
      {
        "name": "size",
        "description": "The number of columns the content occupies.",
        "type": "1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12",
        "required": true,
        "defaultValue": null
      },
      {
        "name": "className",
        "description": "Optional class(es) to pass to the wrapping element.",
        "type": "string",
        "required": false,
        "defaultValue": null
      },
      {
        "name": "element",
        "description": "Optional element type to give the wrapper if not \"div\".",
        "type": "ElementType<any>",
        "required": false,
        "defaultValue": null
      },
      {
        "name": "emptyLarge",
        "description": "The number of columns to skip before starting on large screens.",
        "type": "1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12",
        "required": false,
        "defaultValue": null
      },
      {
        "name": "emptyMedium",
        "description": "The number of columns to skip before starting on medium screens.",
        "type": "1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12",
        "required": false,
        "defaultValue": null
      },
      {
        "name": "emptySmall",
        "description": "The number of columns to skip before starting on small screens.",
        "type": "1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12",
        "required": false,
        "defaultValue": null
      },
      {
        "name": "large",
        "description": "Override for the number of columns the content occupies on large screens.",
        "type": "1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12",
        "required": false,
        "defaultValue": null
      },
      {
        "name": "medium",
        "description": "Override for the number of columns the content occupies on medium screens.",
        "type": "1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12",
        "required": false,
        "defaultValue": null
      },
      {
        "name": "small",
        "description": "Override for the number of columns the content occupies on small screens.",
        "type": "1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12",
        "required": false,
        "defaultValue": null
      }
    ]
  },
  "contextualmenu": {
    "name": "ContextualMenu",
    "stories": [
      {
        "id": "contextualmenu--default-story",
        "name": "Default"
      },
      {
        "id": "contextualmenu--toggle",
        "name": "Toggle"
      }
    ],
    "props": [
      {
        "name": "children",
        "description": "The menu content (if the links prop is not supplied).",
        "type": "ReactNode",
        "required": false,
        "defaultValue": null
      },
      {
        "name": "closeOnOutsideClick",
        "description": "Whether the menu should close when clicking outside the menu.",
        "type": "boolean",
        "required": false,
        "defaultValue": "true"
      },
      {
        "name": "constrainPanelWidth",
        "description": "Whether the menu's width should match the toggle's width.",
        "type": "boolean",
        "required": false,
        "defaultValue": null
      },
      {
        "name": "position",
        "description": "The position of the menu.",
        "type": "\"left\" | \"right\" | \"center\"",
        "required": false,
        "defaultValue": "\"right\""
      },
      {
        "name": "visible",
        "description": "Whether the menu should be visible.",
        "type": "boolean",
        "required": false,
        "defaultValue": "false"
      },
      {
        "name": "autoAdjust",
        "description": "Whether the menu should adjust to fit in the screen.",
        "type": "boolean",
        "required": false,
        "defaultValue": "true"
      },
      {
        "name": "className",
        "description": "An optional class to apply to the wrapping element.",
        "type": "string",
        "required": false,
        "defaultValue": null
      },
      {
        "name": "closeOnEsc",
        "description": "Whether the menu should close when the escape key is pressed.",
        "type": "boolean",
        "required": false,
        "defaultValue": "true"
      },
      {
        "name": "dropdownClassName",
        "description": "An optional class to apply to the dropdown.",
        "type": "string",
        "required": false,
        "defaultValue": null
      },
      {
        "name": "dropdownProps",
        "description": "Additional props to pass to the dropdown.",
        "type": "SubComponentProps<Props<null>>",
        "required": false,
        "defaultValue": null
      },
      {
        "name": "hasToggleIcon",
        "description": "Whether the toggle should display a chevron icon.",
        "type": "boolean",
        "required": false,
        "defaultValue": null
      },
      {
        "name": "links",
        "description": "A list of links to display in the menu (if the children prop is not supplied.)",
        "type": "MenuLink<L>[]",
        "required": false,
        "defaultValue": null
      },
      {
        "name": "onToggleMenu",
        "description": "A function to call when the menu is toggled.",
        "type": "(isOpen: boolean) => void",
        "required": false,
        "defaultValue": null
      },
      {
        "name": "positionNode",
        "description": "An element to make the menu relative to.",
        "type": "HTMLElement",
        "required": false,
        "defaultValue": null
      },
      {
        "name": "toggleAppearance",
        "description": "The appearance of the toggle button.",
        "type": "string",
        "required": false,
        "defaultValue": null
      },
      {
        "name": "toggleClassName",
        "description": "A class to apply to the toggle button.",
        "type": "string",
        "required": false,
        "defaultValue": null
      },
      {
        "name": "toggleDisabled",
        "description": "Whether the toggle button should be disabled.",
        "type": "boolean",
        "required": false,
        "defaultValue": null
      },
      {
        "name": "toggleLabel",
        "description": "The toggle button's label.",
        "type": "string",
        "required": false,
        "defaultValue": null
      },
      {
        "name": "toggleLabelFirst",
        "description": "Whether the toggle lable or icon should appear first.",
        "type": "boolean",
        "required": false,
        "defaultValue": "true"
      },
      {
        "name": "toggleProps",
        "description": "Additional props to pass to the toggle button.",
        "type": "SubComponentProps<Props<null>>",
        "required": false,
        "defaultValue": null
      }
    ]
  },
  "form": {
    "name": "Form",
    "stories": [
      {
        "id": "form--default-story",
        "name": "Default"
      },
      {
        "id": "form--fieldset",
        "name": "Fieldset"
      },
      {
        "id": "form--inline",
        "name": "Inline"
      },
      {
        "id": "form--stacked",
        "name": "Stacked"
      },
      {
        "id": "form--disabled",
        "name": "Disabled"
      },
      {
        "id": "form--validation",
        "name": "Validation"
      },
      {
        "id": "form--required",
        "name": "Required"
      }
    ],
    "props": [
      {
        "name": "children",
        "description": "The content of the form.",
        "type": "ReactNode",
        "required": false,
        "defaultValue": null
      },
      {
        "name": "className",
        "description": "Optional class(es) to pass to the form element.",
        "type": "string",
        "required": false,
        "defaultValue": null
      },
      {
        "name": "inline",
        "description": "",
        "type": "boolean",
        "required": false,
        "defaultValue": null
      },
      {
        "name": "stacked",
        "description": "",
        "type": "boolean",
        "required": false,
        "defaultValue": null
      }
    ]
  },
  "icon": {
    "name": "Icon",
    "stories": [
      {
        "id": "icon--base",
        "name": "Base"
      },
      {
        "id": "icon--default-story",
        "name": "Default"
      },
      {
        "id": "icon--custom",
        "name": "Custom"
      },
      {
        "id": "icon--social",
        "name": "Social"
      }
    ],
    "props": [
      {
        "name": "name",
        "description": "The name of the icon.",
        "type": "string",
        "required": true,
        "defaultValue": null
      },
      {
        "name": "className",
        "description": "Optional classes to add to the icon element.",
        "type": "string",
        "required": false,
        "defaultValue": null
      },
      {
        "name": "light",
        "description": "Whether to show the light variant of the icon.",
        "type": "boolean",
        "required": false,
        "defaultValue": null
      }
    ]
  },
  "input": {
    "name": "Input",
    "stories": [
      {
        "id": "input--text-input",
        "name": "Text input"
      },
      {
        "id": "input--stacked",
        "name": "Stacked"
      },
      {
        "id": "input--disabled",
        "name": "Disabled"
      },
      {
        "id": "input--error",
        "name": "Error"
      },
      {
        "id": "input--success",
        "name": "Success"
      },
      {
        "id": "input--caution",
        "name": "Caution"
      },
      {
        "id": "input--required",
        "name": "Required"
      },
      {
        "id": "input--checkbox",
        "name": "Checkbox"
      },
      {
        "id": "input--radio-button",
        "name": "Radio button"
      }
    ],
    "props": [
      {
        "name": "id",
        "description": "The id of the input.",
        "type": "string",
        "required": false,
        "defaultValue": null
      },
      {
        "name": "label",
        "description": "The label for the field.",
        "type": "ReactNode",
        "required": false,
        "defaultValue": null
      },
      {
        "name": "caution",
        "description": "The content for caution validation.",
        "type": "ReactNode",
        "required": false,
        "defaultValue": null
      },
      {
        "name": "className",
        "description": "Optional class(es) to pass to the input element.",
        "type": "string",
        "required": false,
        "defaultValue": null
      },
      {
        "name": "error",
        "description": "The content for error validation message. Controls the value of aria-invalid attribute.",
        "type": "ReactNode",
        "required": false,
        "defaultValue": null
      },
      {
        "name": "help",
        "description": "Help text to show below the field.",
        "type": "ReactNode",
        "required": false,
        "defaultValue": null
      },
      {
        "name": "labelClassName",
        "description": "Optional class(es) to pass to the label component.",
        "type": "string",
        "required": false,
        "defaultValue": null
      },
      {
        "name": "required",
        "description": "Whether the field is required.",
        "type": "boolean",
        "required": false,
        "defaultValue": null
      },
      {
        "name": "stacked",
        "description": "Whether the form field should have a stacked appearance.",
        "type": "boolean",
        "required": false,
        "defaultValue": null
      },
      {
        "name": "success",
        "description": "The content for success validation.",
        "type": "ReactNode",
        "required": false,
        "defaultValue": null
      },
      {
        "name": "takeFocus",
        "description": "Whether to focus on the input on initial render.",
        "type": "boolean",
        "required": false,
        "defaultValue": null
      },
      {
        "name": "wrapperClassName",
        "description": "Optional class(es) to pass to the wrapping Field component",
        "type": "string",
        "required": false,
        "defaultValue": null
      }
    ]
  },
  "link": {
    "name": "Link",
    "stories": [
      {
        "id": "link--default-story",
        "name": "Default"
      },
      {
        "id": "link--soft",
        "name": "Soft"
      },
      {
        "id": "link--inverted",
        "name": "Inverted"
      },
      {
        "id": "link--back-to-top",
        "name": "Back to top"
      }
    ],
    "props": [
      {
        "name": "children",
        "description": "The content of the link.",
        "type": "ReactNode",
        "required": true,
        "defaultValue": null
      },
      {
        "name": "className",
        "description": "Optional class(es) to pass to the wrapping anchor element.",
        "type": "string",
        "required": false,
        "defaultValue": null
      },
      {
        "name": "inverted",
        "description": "Whether the link should have inverted styling.",
        "type": "boolean",
        "required": false,
        "defaultValue": "false"
      },
      {
        "name": "soft",
        "description": "Whether the link should have soft styling.",
        "type": "boolean",
        "required": false,
        "defaultValue": "false"
      },
      {
        "name": "top",
        "description": "Whether the link should have \"back to top\" styling.",
        "type": "boolean",
        "required": false,
        "defaultValue": "false"
      }
    ]
  },
  "list": {
    "name": "List",
    "stories": [
      {
        "id": "list--default-story",
        "name": "Default"
      },
      {
        "id": "list--ticked",
        "name": "Ticked"
      },
      {
        "id": "list--horizontal-divider",
        "name": "Horizontal divider"
      },
      {
        "id": "list--ticked-with-horizontal-divider",
        "name": "Ticked with horizontal divider"
      },
      {
        "id": "list--inline",
        "name": "Inline"
      },
      {
        "id": "list--middot",
        "name": "Middot"
      },
      {
        "id": "list--stretch",
        "name": "Stretch"
      },
      {
        "id": "list--vertical-stepped",
        "name": "Vertical stepped"
      },
      {
        "id": "list--horizontal-stepped",
        "name": "Horizontal stepped"
      },
      {
        "id": "list--split",
        "name": "Split"
      }
    ],
    "props": [
      {
        "name": "items",
        "description": "The list's items.",
        "type": "ListItem[] | SteppedListItem[]",
        "required": true,
        "defaultValue": null
      },
      {
        "name": "className",
        "description": "Optional class(es) to pass to the wrapping element.",
        "type": "string",
        "required": false,
        "defaultValue": null
      },
      {
        "name": "detailed",
        "description": "",
        "type": "boolean",
        "required": false,
        "defaultValue": null
      },
      {
        "name": "divided",
        "description": "",
        "type": "boolean",
        "required": false,
        "defaultValue": null
      },
      {
        "name": "inline",
        "description": "",
        "type": "boolean",
        "required": false,
        "defaultValue": null
      },
      {
        "name": "isDark",
        "description": "",
        "type": "boolean",
        "required": false,
        "defaultValue": null
      },
      {
        "name": "middot",
        "description": "",
        "type": "boolean",
        "required": false,
        "defaultValue": null
      },
      {
        "name": "split",
        "description": "",
        "type": "boolean",
        "required": false,
        "defaultValue": null
      },
      {
        "name": "stepped",
        "description": "",
        "type": "boolean",
        "required": false,
        "defaultValue": null
      },
      {
        "name": "stretch",
        "description": "",
        "type": "boolean",
        "required": false,
        "defaultValue": null
      },
      {
        "name": "ticked",
        "description": "",
        "type": "boolean",
        "required": false,
        "defaultValue": null
      }
    ]
  },
  "loader": {
    "name": "Loader",
    "stories": [
      {
        "id": "loader--default-story",
        "name": "Default"
      }
    ],
    "props": [
      {
        "name": "className",
        "description": "Optional class(es) to pass to the wrapping span element.",
        "type": "string",
        "required": false,
        "defaultValue": null
      },
      {
        "name": "isLight",
        "description": "Whether the spinner should have a light appearance.",
        "type": "boolean",
        "required": false,
        "defaultValue": null
      },
      {
        "name": "text",
        "description": "Text to display next to the spinner.",
        "type": "string",
        "required": false,
        "defaultValue": null
      },
      {
        "name": "role",
        "description": "What the role of the spinner should be.",
        "type": "string & AriaRole",
        "required": false,
        "defaultValue": null
      },
      {
        "name": "ariaLive",
        "description": "The politeness setting of the spinner alert.",
        "type": "\"off\" | \"assertive\" | \"polite\"",
        "required": false,
        "defaultValue": null
      }
    ]
  },
  "maintable": {
    "name": "MainTable",
    "stories": [
      {
        "id": "maintable--default-story",
        "name": "Default"
      },
      {
        "id": "maintable--sortable",
        "name": "Sortable"
      },
      {
        "id": "maintable--expanding",
        "name": "Expanding"
      },
      {
        "id": "maintable--overflow",
        "name": "Overflow"
      },
      {
        "id": "maintable--responsive",
        "name": "Responsive"
      },
      {
        "id": "maintable--paginated",
        "name": "Paginated"
      },
      {
        "id": "maintable--empty",
        "name": "Empty"
      }
    ],
    "props": [
      {
        "name": "headers",
        "description": "The header columns for this table.",
        "type": "MainTableHeader[]",
        "required": false,
        "defaultValue": null
      },
      {
        "name": "rows",
        "description": "The rows to display in the table.",
        "type": "MainTableRow[]",
        "required": false,
        "defaultValue": null
      },
      {
        "name": "defaultSort",
        "description": "The default key to sort the rows by.",
        "type": "string",
        "required": false,
        "defaultValue": null
      },
      {
        "name": "defaultSortDirection",
        "description": "The default direction the row data should be sorted by.",
        "type": "\"none\" | \"ascending\" | \"descending\"",
        "required": false,
        "defaultValue": null
      },
      {
        "name": "emptyStateMsg",
        "description": "A message to display when there are no table rows.",
        "type": "ReactNode",
        "required": false,
        "defaultValue": null
      },
      {
        "name": "onUpdateSort",
        "description": "A function that is called when the sort key is changed.",
        "type": "(sortKey: string) => void",
        "required": false,
        "defaultValue": null
      },
      {
        "name": "paginate",
        "description": "A number of rows to paginate by.",
        "type": "number",
        "required": false,
        "defaultValue": null
      },
      {
        "name": "sortable",
        "description": "Whether this table should be sortable.",
        "type": "boolean",
        "required": false,
        "defaultValue": null
      },
      {
        "name": "sortFunction",
        "description": "A function to be used when sorting.",
        "type": "(a: MainTableRow, b: MainTableRow, currentSortDirection: SortDirection, currentSortKey: string) => 0 | 1 | -1",
        "required": false,
        "defaultValue": null
      },
      {
        "name": "className",
        "description": "Optional class(es) to pass to the wrapping table element.",
        "type": "string",
        "required": false,
        "defaultValue": null
      },
      {
        "name": "children",
        "description": "The content of the table.",
        "type": "ReactNode",
        "required": false,
        "defaultValue": null
      },
      {
        "name": "expanding",
        "description": "Whether the table can expand hidden cells.",
        "type": "boolean",
        "required": false,
        "defaultValue": null
      },
      {
        "name": "responsive",
        "description": "Whether the table should show card styling on smaller screens.",
        "type": "boolean",
        "required": false,
        "defaultValue": null
      }
    ]
  },
  "modal": {
    "name": "Modal",
    "stories": [
      {
        "id": "modal--default-story",
        "name": "Default"
      }
    ],
    "props": [
      {
        "name": "buttonRow",
        "description": "Buttons to display underneath the main modal content.",
        "type": "ReactNode",
        "required": false,
        "defaultValue": null
      },
      {
        "name": "className",
        "description": "Optional class(es) to apply to the wrapping element.",
        "type": "string",
        "required": false,
        "defaultValue": null
      },
      {
        "name": "children",
        "description": "The content of the modal.",
        "type": "ReactNode",
        "required": true,
        "defaultValue": null
      },
      {
        "name": "close",
        "description": "Function to handle closing the modal.",
        "type": "() => void",
        "required": false,
        "defaultValue": null
      },
      {
        "name": "title",
        "description": "The title of the modal.",
        "type": "ReactNode",
        "required": false,
        "defaultValue": null
      }
    ]
  },
  "modulartable": {
    "name": "ModularTable",
    "stories": [
      {
        "id": "modulartable--default-story",
        "name": "Default"
      },
      {
        "id": "modulartable--empty",
        "name": "Empty"
      },
      {
        "id": "modulartable--load-more",
        "name": "Load more"
      }
    ],
    "props": [
      {
        "name": "columns",
        "description": "The columns of the table.",
        "type": "Column<Record<string, unknown>>[]",
        "required": true,
        "defaultValue": null
      },
      {
        "name": "data",
        "description": "The data of the table.",
        "type": "Record<string, unknown>[]",
        "required": true,
        "defaultValue": null
      },
      {
        "name": "emptyMsg",
        "description": "A message to display if data is empty.",
        "type": "string",
        "required": false,
        "defaultValue": null
      },
      {
        "name": "footer",
        "description": "Optional extra row to display underneath the main table content.",
        "type": "ReactNode",
        "required": false,
        "defaultValue": null
      },
      {
        "name": "getHeaderProps",
        "description": "This function is used to resolve any props needed for a particular column's header cell.",
        "type": "(header: HeaderGroup<Record<string, unknown>>) => Partial<TableHeaderProps & HTMLProps<HTMLTableHeaderCellElement>>",
        "required": false,
        "defaultValue": null
      },
      {
        "name": "getRowProps",
        "description": "This function is used to resolve any props needed for a particular row.",
        "type": "(row: Row<Record<string, unknown>>) => Partial<TableRowProps & HTMLProps<HTMLTableRowElement>>",
        "required": false,
        "defaultValue": null
      },
      {
        "name": "getCellProps",
        "description": "This function is used to resolve any props needed for a particular cell.",
        "type": "(cell: Cell<Record<string, unknown>, any>) => Partial<TableCellProps & HTMLProps<HTMLTableCellElement>>",
        "required": false,
        "defaultValue": null
      },
      {
        "name": "getRowId",
        "description": "",
        "type": "(originalRow: Record<string, unknown>, relativeIndex: number, parent?: Row<Record<string, unknown>>) => string",
        "required": false,
        "defaultValue": null
      }
    ]
  },
  "notification": {
    "name": "Notification",
    "stories": [
      {
        "id": "notification--information",
        "name": "Information"
      },
      {
        "id": "notification--caution",
        "name": "Caution"
      },
      {
        "id": "notification--negative",
        "name": "Negative"
      },
      {
        "id": "notification--positive",
        "name": "Positive"
      },
      {
        "id": "notification--inline",
        "name": "Inline"
      },
      {
        "id": "notification--borderless",
        "name": "Borderless"
      },
      {
        "id": "notification--actions",
        "name": "Actions"
      },
      {
        "id": "notification--dismissible",
        "name": "Dismissible"
      },
      {
        "id": "notification--timeout",
        "name": "Timeout"
      },
      {
        "id": "notification--timestamp",
        "name": "Timestamp"
      }
    ],
    "props": [
      {
        "name": "children",
        "description": "The notification message content.",
        "type": "ReactNode",
        "required": false,
        "defaultValue": null
      },
      {
        "name": "severity",
        "description": "The severity of the notification.",
        "type": "\"caution\" | \"information\" | \"negative\" | \"positive\"",
        "required": false,
        "defaultValue": "\"information\""
      },
      {
        "name": "title",
        "description": "The title of the notification.",
        "type": "ReactNode",
        "required": false,
        "defaultValue": null
      },
      {
        "name": "actions",
        "description": "A list of up to two actions that the notification can perform.",
        "type": "NotificationAction[]",
        "required": false,
        "defaultValue": null
      },
      {
        "name": "borderless",
        "description": "Whether the notification should not have a border.",
        "type": "boolean",
        "required": false,
        "defaultValue": "false"
      },
      {
        "name": "className",
        "description": "Optional class(es) to apply to the parent notification element.",
        "type": "string",
        "required": false,
        "defaultValue": null
      },
      {
        "name": "close",
        "description": "**Deprecated**. Use `onDismiss` instead.",
        "type": "never",
        "required": false,
        "defaultValue": null
      },
      {
        "name": "inline",
        "description": "Whether the title should display inline with the message.",
        "type": "boolean",
        "required": false,
        "defaultValue": "false"
      },
      {
        "name": "onDismiss",
        "description": "The function to run when dismissing/closing the notification.",
        "type": "() => void",
        "required": false,
        "defaultValue": null
      },
      {
        "name": "status",
        "description": "**Deprecated**. Use `title` instead.",
        "type": "never",
        "required": false,
        "defaultValue": null
      },
      {
        "name": "timeout",
        "description": "The amount of time (in ms) until the notification is automatically dismissed.",
        "type": "number",
        "required": false,
        "defaultValue": null
      },
      {
        "name": "timestamp",
        "description": "A relevant timestamp for the notification, e.g. when it was created.",
        "type": "ReactNode",
        "required": false,
        "defaultValue": null
      },
      {
        "name": "type",
        "description": "**Deprecated**. Use `severity` instead.",
        "type": "never",
        "required": false,
        "defaultValue": null
      }
    ]
  },
  "pagination": {
    "name": "Pagination",
    "stories": [
      {
        "id": "pagination--default-story",
        "name": "Default"
      },
      {
        "id": "pagination--truncated",
        "name": "Truncated"
      },
      {
        "id": "pagination--disabled-controls",
        "name": "Disabled controls"
      }
    ],
    "props": [
      {
        "name": "itemsPerPage",
        "description": "The number of items to show per page.",
        "type": "number",
        "required": true,
        "defaultValue": null
      },
      {
        "name": "totalItems",
        "description": "The total number of items.",
        "type": "number",
        "required": true,
        "defaultValue": null
      },
      {
        "name": "paginate",
        "description": "Function to handle paginating the items.",
        "type": "(page: number) => void",
        "required": true,
        "defaultValue": null
      },
      {
        "name": "currentPage",
        "description": "The current page being viewed.",
        "type": "number",
        "required": true,
        "defaultValue": null
      },
      {
        "name": "scrollToTop",
        "description": "Whether to scroll to the top of the list on page change.",
        "type": "boolean",
        "required": false,
        "defaultValue": null
      },
      {
        "name": "truncateThreshold",
        "description": "The number of pages at which to truncate the pagination items.",
        "type": "number",
        "required": false,
        "defaultValue": "10"
      }
    ]
  },
  "passwordtoggle": {
    "name": "PasswordToggle",
    "stories": [
      {
        "id": "passwordtoggle--default-story",
        "name": "Default"
      },
      {
        "id": "passwordtoggle--read-only",
        "name": "Read only"
      },
      {
        "id": "passwordtoggle--error",
        "name": "Error"
      },
      {
        "id": "passwordtoggle--success",
        "name": "Success"
      },
      {
        "id": "passwordtoggle--caution",
        "name": "Caution"
      },
      {
        "id": "passwordtoggle--help",
        "name": "Help"
      },
      {
        "id": "passwordtoggle--disabled",
        "name": "Disabled"
      }
    ],
    "props": [
      {
        "name": "caution",
        "description": "The content for caution validation.",
        "type": "ReactNode",
        "required": false,
        "defaultValue": null
      },
      {
        "name": "className",
        "description": "Optional class(es) to pass to the input element.",
        "type": "string",
        "required": false,
        "defaultValue": null
      },
      {
        "name": "error",
        "description": "The content for error validation.",
        "type": "ReactNode",
        "required": false,
        "defaultValue": null
      },
      {
        "name": "help",
        "description": "Help text to show below the field.",
        "type": "ReactNode",
        "required": false,
        "defaultValue": null
      },
      {
        "name": "id",
        "description": "The id of the input.",
        "type": "string",
        "required": true,
        "defaultValue": null
      },
      {
        "name": "label",
        "description": "The label for the field.",
        "type": "ReactNode",
        "required": false,
        "defaultValue": null
      },
      {
        "name": "readOnly",
        "description": "Whether the field is read only.",
        "type": "boolean",
        "required": false,
        "defaultValue": null
      },
      {
        "name": "required",
        "description": "Whether the field is required.",
        "type": "boolean",
        "required": false,
        "defaultValue": null
      },
      {
        "name": "success",
        "description": "The content for success validation.",
        "type": "ReactNode",
        "required": false,
        "defaultValue": null
      },
      {
        "name": "type",
        "description": "The content for success validation.",
        "type": "\"button\" | \"submit\" | \"reset\"",
        "required": false,
        "defaultValue": null
      },
      {
        "name": "wrapperClassName",
        "description": "Optional class(es) to pass to the wrapping Field component",
        "type": "string",
        "required": false,
        "defaultValue": null
      }
    ]
  },
  "radioinput": {
    "name": "RadioInput",
    "stories": [
      {
        "id": "radioinput--default-story",
        "name": "Default"
      },
      {
        "id": "radioinput--children",
        "name": "Children"
      },
      {
        "id": "radioinput--disabled",
        "name": "Disabled"
      },
      {
        "id": "radioinput--required",
        "name": "Required"
      },
      {
        "id": "radioinput--inline",
        "name": "Inline"
      }
    ],
    "props": [
      {
        "name": "label",
        "description": "The label for the input element.",
        "type": "ReactNode",
        "required": true,
        "defaultValue": null
      },
      {
        "name": "labelClassName",
        "description": "Optional class(es) to pass to the label element.",
        "type": "string",
        "required": false,
        "defaultValue": null
      },
      {
        "name": "inline",
        "description": "Ensures the input and the label text are properly aligned with other inline text.",
        "type": "boolean",
        "required": false,
        "defaultValue": null
      },
      {
        "name": "indeterminate",
        "description": "Whether the input element should display in indeterminate state.",
        "type": "boolean",
        "required": false,
        "defaultValue": null
      }
    ]
  },
  "row": {
    "name": "Row",
    "stories": [
      {
        "id": "row--default-story",
        "name": "Default"
      }
    ],
    "props": [
      {
        "name": "children",
        "description": "The content of the row.",
        "type": "ReactNode",
        "required": true,
        "defaultValue": null
      },
      {
        "name": "className",
        "description": "Optional class(es) to pass to the wrapping div element.",
        "type": "string",
        "required": false,
        "defaultValue": null
      }
    ]
  },
  "search-and-filter": {
    "name": "Search and Filter",
    "stories": [
      {
        "id": "search-and-filter--default-story",
        "name": "Default"
      },
      {
        "id": "search-and-filter--with-data-set",
        "name": "With data set"
      },
      {
        "id": "search-and-filter--with-existing-search-data",
        "name": "With existing search data"
      }
    ],
    "props": [
      {
        "name": "returnSearchData",
        "description": "A function that is called when the search data changes.",
        "type": "(searchData: SearchAndFilterChip[]) => void",
        "required": true,
        "defaultValue": null
      },
      {
        "name": "filterPanelData",
        "description": "The data for the filter panel.",
        "type": "SearchAndFilterData[]",
        "required": true,
        "defaultValue": null
      },
      {
        "name": "existingSearchData",
        "description": "A list of chips to initialise inside the input.",
        "type": "SearchAndFilterChip[]",
        "required": false,
        "defaultValue": "[]"
      }
    ]
  },
  "searchbox": {
    "name": "SearchBox",
    "stories": [
      {
        "id": "searchbox--default-story",
        "name": "Default"
      },
      {
        "id": "searchbox--disabled",
        "name": "Disabled"
      },
      {
        "id": "searchbox--external-state",
        "name": "External state"
      },
      {
        "id": "searchbox--navigation",
        "name": "Navigation"
      }
    ],
    "props": [
      {
        "name": "autocomplete",
        "description": "Whether autocomplete should be enabled for the search input.",
        "type": "\"on\" | \"off\"",
        "required": false,
        "defaultValue": "\"on\""
      },
      {
        "name": "className",
        "description": "Optional classes to pass to the form element.",
        "type": "string",
        "required": false,
        "defaultValue": null
      },
      {
        "name": "disabled",
        "description": "Whether the input and buttons should be disabled.",
        "type": "boolean",
        "required": false,
        "defaultValue": null
      },
      {
        "name": "externallyControlled",
        "description": "Whether the input value will be controlled via external state.",
        "type": "boolean",
        "required": false,
        "defaultValue": null
      },
      {
        "name": "onChange",
        "description": "A function that will be called when the input value changes.",
        "type": "(inputValue: string) => void",
        "required": false,
        "defaultValue": null
      },
      {
        "name": "onSearch",
        "description": "A function that is called when the user clicks the search icon",
        "type": "() => void",
        "required": false,
        "defaultValue": null
      },
      {
        "name": "placeholder",
        "description": "A search input placeholder message.",
        "type": "string",
        "required": false,
        "defaultValue": "\"Search\""
      },
      {
        "name": "value",
        "description": "The value of the search input when the state is externally controlled.",
        "type": "string",
        "required": false,
        "defaultValue": null
      }
    ]
  },
  "select": {
    "name": "Select",
    "stories": [
      {
        "id": "select--select",
        "name": "Select"
      },
      {
        "id": "select--select-multiple",
        "name": "Select multiple"
      }
    ],
    "props": [
      {
        "name": "id",
        "description": "The id of the input.",
        "type": "string",
        "required": false,
        "defaultValue": null
      },
      {
        "name": "options",
        "description": "Array of options that the select can choose from.",
        "type": "Option[]",
        "required": false,
        "defaultValue": null
      },
      {
        "name": "label",
        "description": "The label for the field.",
        "type": "ReactNode",
        "required": false,
        "defaultValue": null
      },
      {
        "name": "caution",
        "description": "The content for caution validation.",
        "type": "ReactNode",
        "required": false,
        "defaultValue": null
      },
      {
        "name": "className",
        "description": "Optional class(es) to pass to the input element.",
        "type": "string",
        "required": false,
        "defaultValue": null
      },
      {
        "name": "error",
        "description": "The content for error validation.",
        "type": "ReactNode",
        "required": false,
        "defaultValue": null
      },
      {
        "name": "help",
        "description": "Help text to show below the field.",
        "type": "ReactNode",
        "required": false,
        "defaultValue": null
      },
      {
        "name": "labelClassName",
        "description": "Optional class(es) to pass to the label component.",
        "type": "string",
        "required": false,
        "defaultValue": null
      },
      {
        "name": "onChange",
        "description": "Function to run when select value changes.",
        "type": "ChangeEventHandler<HTMLSelectElement>",
        "required": false,
        "defaultValue": null
      },
      {
        "name": "required",
        "description": "Whether the field is required.",
        "type": "boolean",
        "required": false,
        "defaultValue": null
      },
      {
        "name": "stacked",
        "description": "Whether the form field should have a stacked appearance.",
        "type": "boolean",
        "required": false,
        "defaultValue": null
      },
      {
        "name": "success",
        "description": "The content for success validation.",
        "type": "ReactNode",
        "required": false,
        "defaultValue": null
      },
      {
        "name": "takeFocus",
        "description": "Whether to focus on the input on initial render.",
        "type": "boolean",
        "required": false,
        "defaultValue": null
      },
      {
        "name": "wrapperClassName",
        "description": "Optional class(es) to pass to the wrapping Field component",
        "type": "string",
        "required": false,
        "defaultValue": null
      }
    ]
  },
  "slider": {
    "name": "Slider",
    "stories": [
      {
        "id": "slider--default-story",
        "name": "Default"
      },
      {
        "id": "slider--with-input",
        "name": "With input"
      }
    ],
    "props": [
      {
        "name": "disabled",
        "description": "Whether to disable the slider and input (if showInput is true).",
        "type": "boolean",
        "required": false,
        "defaultValue": "false"
      },
      {
        "name": "label",
        "description": "Field label.",
        "type": "ReactNode",
        "required": false,
        "defaultValue": null
      },
      {
        "name": "max",
        "description": "Maximum value of the slider.",
        "type": "number",
        "required": true,
        "defaultValue": null
      },
      {
        "name": "min",
        "description": "Minimum value of the slider.",
        "type": "number",
        "required": true,
        "defaultValue": null
      },
      {
        "name": "showInput",
        "description": "Whether to show a number input with the numerical value next to the slider.",
        "type": "boolean",
        "required": false,
        "defaultValue": "false"
      },
      {
        "name": "caution",
        "description": "Field caution message.",
        "type": "ReactNode",
        "required": false,
        "defaultValue": null
      },
      {
        "name": "error",
        "description": "Field error message.",
        "type": "ReactNode",
        "required": false,
        "defaultValue": null
      },
      {
        "name": "help",
        "description": "Field help message.",
        "type": "ReactNode",
        "required": false,
        "defaultValue": null
      },
      {
        "name": "id",
        "description": "Field id. Only passed to range input, not to number input.",
        "type": "string",
        "required": false,
        "defaultValue": null
      },
      {
        "name": "inputDisabled",
        "description": "Whether to disable only the input, but not the slider.",
        "type": "boolean",
        "required": false,
        "defaultValue": "false"
      },
      {
        "name": "onChange",
        "description": "Change event handler.",
        "type": "ChangeEventHandler<HTMLInputElement>",
        "required": true,
        "defaultValue": null
      },
      {
        "name": "required",
        "description": "Whether the field is required for the form to submit.",
        "type": "boolean",
        "required": false,
        "defaultValue": "false"
      }
    ]
  },
  "spinner": {
    "name": "Spinner",
    "stories": [
      {
        "id": "spinner--default-story",
        "name": "Default"
      },
      {
        "id": "spinner--text",
        "name": "Text"
      },
      {
        "id": "spinner--assertive",
        "name": "Assertive"
      }
    ],
    "props": [
      {
        "name": "isLight",
        "description": "Whether the spinner should have a light appearance.",
        "type": "boolean",
        "required": false,
        "defaultValue": "false"
      },
      {
        "name": "text",
        "description": "Text to display next to the spinner.",
        "type": "string",
        "required": false,
        "defaultValue": null
      },
      {
        "name": "role",
        "description": "What the role of the spinner should be.",
        "type": "string & AriaRole",
        "required": false,
        "defaultValue": "alert"
      },
      {
        "name": "ariaLive",
        "description": "The politeness setting of the spinner alert.",
        "type": "\"off\" | \"assertive\" | \"polite\"",
        "required": false,
        "defaultValue": "\"polite\""
      }
    ]
  },
  "strip": {
    "name": "Strip",
    "stories": [
      {
        "id": "strip--light-strip",
        "name": "Light strip"
      },
      {
        "id": "strip--dark-strip",
        "name": "Dark strip"
      },
      {
        "id": "strip--accent-strip",
        "name": "Accent strip"
      },
      {
        "id": "strip--image-strip",
        "name": "Image strip"
      },
      {
        "id": "strip--bordered-strip",
        "name": "Bordered strip"
      },
      {
        "id": "strip--deep-strip",
        "name": "Deep strip"
      },
      {
        "id": "strip--shallow-strip",
        "name": "Shallow strip"
      }
    ],
    "props": [
      {
        "name": "type",
        "description": "The type of the strip (e.g. \"accent\" or \"image\").",
        "type": "string",
        "required": false,
        "defaultValue": null
      },
      {
        "name": "children",
        "description": "The content of the strip.",
        "type": "ReactNode",
        "required": true,
        "defaultValue": null
      },
      {
        "name": "background",
        "description": "A background images for the strip.",
        "type": "string",
        "required": false,
        "defaultValue": null
      },
      {
        "name": "bordered",
        "description": "Whether the strip should display borders.",
        "type": "boolean",
        "required": false,
        "defaultValue": "false"
      },
      {
        "name": "className",
        "description": "Optional classes for the strip.",
        "type": "string",
        "required": false,
        "defaultValue": null
      },
      {
        "name": "colSize",
        "description": "The width of the column if `includeCol` has been set.",
        "type": "1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12",
        "required": false,
        "defaultValue": "12"
      },
      {
        "name": "dark",
        "description": "Whether the strip should be dark.",
        "type": "boolean",
        "required": false,
        "defaultValue": "false"
      },
      {
        "name": "deep",
        "description": "Whether the strip should be deep.",
        "type": "boolean",
        "required": false,
        "defaultValue": "false"
      },
      {
        "name": "element",
        "description": "The base HTML element of the strip.",
        "type": "ElementType<any>",
        "required": false,
        "defaultValue": null
      },
      {
        "name": "includeCol",
        "description": "Whether the strip should wrap the content in a column.",
        "type": "boolean",
        "required": false,
        "defaultValue": "true"
      },
      {
        "name": "light",
        "description": "Whether the strip should be light.",
        "type": "boolean",
        "required": false,
        "defaultValue": "false"
      },
      {
        "name": "rowClassName",
        "description": "Optional classes to apply to the row.",
        "type": "string",
        "required": false,
        "defaultValue": null
      },
      {
        "name": "shallow",
        "description": "Whether the strip should be shallow.",
        "type": "boolean",
        "required": false,
        "defaultValue": "false"
      }
    ]
  },
  "summarybutton": {
    "name": "SummaryButton",
    "stories": [
      {
        "id": "summarybutton--default-story",
        "name": "Default"
      },
      {
        "id": "summarybutton--action-only",
        "name": "Action only"
      },
      {
        "id": "summarybutton--summary-only",
        "name": "Summary only"
      },
      {
        "id": "summarybutton--loading",
        "name": "Loading"
      }
    ],
    "props": [
      {
        "name": "className",
        "description": "Optional class(es) to pass to the wrapping element.",
        "type": "string",
        "required": false,
        "defaultValue": null
      },
      {
        "name": "isLoading",
        "description": "Whether the summary button is loading.",
        "type": "boolean",
        "required": false,
        "defaultValue": null
      },
      {
        "name": "label",
        "description": "The label of the summary button.",
        "type": "string",
        "required": true,
        "defaultValue": null
      },
      {
        "name": "onClick",
        "description": "Function to handle clicking the summary button.",
        "type": "MouseEventHandler<HTMLButtonElement>",
        "required": true,
        "defaultValue": null
      },
      {
        "name": "summary",
        "description": "The summary content.",
        "type": "string",
        "required": false,
        "defaultValue": null
      }
    ]
  },
  "switch": {
    "name": "Switch",
    "stories": [
      {
        "id": "switch--default-story",
        "name": "Default"
      },
      {
        "id": "switch--disabled",
        "name": "Disabled"
      }
    ],
    "props": [
      {
        "name": "label",
        "description": "The label name for the switch",
        "type": "ReactNode",
        "required": true,
        "defaultValue": null
      },
      {
        "name": "disabled",
        "description": "Whether the switch is disabled or not",
        "type": "boolean",
        "required": false,
        "defaultValue": "false"
      }
    ]
  },
  "tabs": {
    "name": "Tabs",
    "stories": [
      {
        "id": "tabs--default-story",
        "name": "Default"
      },
      {
        "id": "tabs--horizontally-aligned",
        "name": "Horizontally aligned"
      }
    ],
    "props": [
      {
        "name": "links",
        "description": "An array of tab link objects.",
        "type": "TabLink<P>[]",
        "required": true,
        "defaultValue": null
      },
      {
        "name": "className",
        "description": "Optional classes applied to the parent \"nav\" element.",
        "type": "string",
        "required": false,
        "defaultValue": null
      },
      {
        "name": "listClassName",
        "description": "Optional classes applied to the \"ul\" element.",
        "type": "string",
        "required": false,
        "defaultValue": null
      }
    ]
  },
  "textarea": {
    "name": "Textarea",
    "stories": [
      {
        "id": "textarea--default-story",
        "name": "Default"
      }
    ],
    "props": [
      {
        "name": "label",
        "description": "The label for the field.",
        "type": "ReactNode",
        "required": false,
        "defaultValue": null
      },
      {
        "name": "id",
        "description": "The id of the textarea.",
        "type": "string",
        "required": false,
        "defaultValue": null
      },
      {
        "name": "caution",
        "description": "The content for caution validation.",
        "type": "ReactNode",
        "required": false,
        "defaultValue": null
      },
      {
        "name": "className",
        "description": "Optional class(es) to pass to the textarea element.",
        "type": "string",
        "required": false,
        "defaultValue": null
      },
      {
        "name": "error",
        "description": "The content for error validation.",
        "type": "ReactNode",
        "required": false,
        "defaultValue": null
      },
      {
        "name": "grow",
        "description": "Whether the textarea should grow to fit the content automatically.",
        "type": "boolean",
        "required": false,
        "defaultValue": "false"
      },
      {
        "name": "help",
        "description": "Help text to show below the field.",
        "type": "ReactNode",
        "required": false,
        "defaultValue": null
      },
      {
        "name": "labelClassName",
        "description": "Optional class(es) to pass to the label component.",
        "type": "string",
        "required": false,
        "defaultValue": null
      },
      {
        "name": "required",
        "description": "Whether the field is required.",
        "type": "boolean",
        "required": false,
        "defaultValue": null
      },
      {
        "name": "stacked",
        "description": "Whether the form field should have a stacked appearance.",
        "type": "boolean",
        "required": false,
        "defaultValue": null
      },
      {
        "name": "success",
        "description": "The content for success validation.",
        "type": "ReactNode",
        "required": false,
        "defaultValue": null
      },
      {
        "name": "takeFocus",
        "description": "Whether to focus on the input on initial render.",
        "type": "boolean",
        "required": false,
        "defaultValue": "false"
      },
      {
        "name": "wrapperClassName",
        "description": "Optional class(es) to pass to the wrapping Field component",
        "type": "string",
        "required": false,
        "defaultValue": null
      }
    ]
  },
  "tooltip": {
    "name": "Tooltip",
    "stories": [
      {
        "id": "tooltip--default-story",
        "name": "Default"
      },
      {
        "id": "tooltip--follow-mouse",
        "name": "Follow mouse"
      },
      {
        "id": "tooltip--targeting-elements",
        "name": "Targeting elements"
      }
    ],
    "props": [
      {
        "name": "message",
        "description": "Message to display when the element is hovered.",
        "type": "ReactNode",
        "required": false,
        "defaultValue": null
      },
      {
        "name": "autoAdjust",
        "description": "Whether the tooltip should adjust to fit in the screen.",
        "type": "boolean",
        "required": false,
        "defaultValue": "true"
      },
      {
        "name": "children",
        "description": "Element on which to apply the tooltip.",
        "type": "ReactNode",
        "required": true,
        "defaultValue": null
      },
      {
        "name": "className",
        "description": "An optional class to apply to the wrapping element.",
        "type": "string",
        "required": false,
        "defaultValue": null
      },
      {
        "name": "followMouse",
        "description": "Whether the tooltip should follow the mouse.",
        "type": "boolean",
        "required": false,
        "defaultValue": "false"
      },
      {
        "name": "position",
        "description": "Position of the tooltip relative to the element.",
        "type": "\"btm-center\" | \"btm-left\" | \"btm-right\" | \"left\" | \"right\" | \"top-center\" | \"top-left\" | \"top-right\"",
        "required": false,
        "defaultValue": "\"top-left\""
      },
      {
        "name": "positionElementClassName",
        "description": "An optional class to apply to the element that wraps the children.",
        "type": "string",
        "required": false,
        "defaultValue": null
      },
      {
        "name": "tooltipClassName",
        "description": "An optional class to apply to the tooltip message element.",
        "type": "string",
        "required": false,
        "defaultValue": null
      }
    ]
  }
}