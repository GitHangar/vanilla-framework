name: Hello

on: [push]

jobs:
  docker_build:
     runs-on: ubuntu-latest
     steps:
       - uses: actions/checkout@v2
       - run: DOCKER_BUILDKIT=1 docker build --tag vf-test .
       - run: docker docker run -ti -p 8101:80 vf-test &
       - run: sleep 5
       - run: curl localhost:8101/_status/check
  #   hello:
  #     runs-on: ubuntu-latest
  #     steps:
  #       - uses: actions/checkout@v2
  #       - name: Run a one-line script
  #         run: echo Hello, world!
  #       - name: Run a multi-line script
  #         run: |
  #           echo Add other actions to build,
  #           echo test, and deploy your project.
#   build:
#     name: Build Vanilla
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@v2
#       - uses: actions/setup-node@v1
#         with:
#           node-version: 12
#       - name: Read Vanilla version from package.json
#         run: |
#           node -p "require('./package.json').version" > VANILLA_VERSION
#           echo "Building Vanilla v$(cat VANILLA_VERSION)"
#       - run: yarn install
#       - run: yarn build
#       - run: yarn test
#       - run: cp VANILLA_VERSION build/css
#       - name: Store built files
#         uses: actions/upload-artifact@v1
#         with:
#           name: css
#           path: build/css

#   publish-npm:
#     name: Publish to NPM
#     needs: build
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@v2
#       - uses: actions/setup-node@v1
#         with:
#           node-version: 12
#           registry-url: https://registry.npmjs.org/
#       - run: npm publish --dry-run
#         env:
#           NODE_AUTH_TOKEN: ${{secrets.NPM_TOKEN}}

#   publish-assets:
#     name: Publish to assets server
#     needs: [build, publish-npm]
#     runs-on: ubuntu-latest
#     steps:
#       - name: Get css from build job
#         uses: actions/download-artifact@v1
#         with:
#           name: css
#       - name: Install upload-assets snap
#         run: sudo snap install upload-assets
#       - name: Upload to assets server
#         run: upload-assets --url-path vanilla-framework-version-$(cat css/VANILLA_VERSION).min.css css/build.css
#         env:
#           UPLOAD_ASSETS_API_TOKEN: ${{secrets.UPLOAD_ASSETS_API_TOKEN}}
  # build:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v2
  #     - uses: actions/setup-node@v1
  #       with:
  #         node-version: 12
  #     - run: yarn install
  #     - run: yarn build
  #     - run: yarn test
  #     - uses: actions/upload-artifact@v1
  #       with:
  #         name: css
  #         path: build/css
  #     - name: Read Vanilla version from package.json
  #       run: node -p "require('./package.json').version" > VANILLA_VERSION
  #     - uses: actions/upload-artifact@v1
  #       with:
  #         name: env
  #         path: VANILLA_VERSION
  #
  # publish:
  #   needs: build
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/download-artifact@v1
  #       with:
  #         name: css
  #     - uses: actions/download-artifact@v1
  #       with:
  #         name: env
  #     - run: ls
  #     - run: ls css
  #     - run: ls env
  #     - run: cp css/build.css vanilla-framework-version-$(cat env/VANILLA_VERSION).min.css
  #     - run: cat vanilla-framework-version-$(cat env/VANILLA_VERSION).min.css
  #     - run: ls
#       - name: Test
#         run: yarn test
#       - name: Upload artifact
#         uses: actions/upload-artifact@v1
#         with:
#           name: css
#           path: build/css
#   publish:
#     needs: [build]
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/setup-node@v1
#         with:
#           node-version: 12
#       - uses: actions/download-artifact@v1
#         with:
#           name: css
#       - run: cat css/build.css
# release:
#   name: Create Release
#   needs: [build]
#   runs-on: ubuntu-latest
#   steps:
#     - name: Checkout code
#       uses: actions/checkout@master
# - uses: release-drafter/release-drafter@v5
#   id: create_release
#   env:
#     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#       - name: Create Release
#         id: create_release
#         uses: actions/create-release@v1
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
#         with:
#           tag_name: v2.7.0-action.test2
#           release_name: Release v2.7.0-action.test2
#           draft: false
#           prerelease: true
# - uses: actions/download-artifact@v1
#   with:
#     name: css
# - name: Upload Release Asset
#   id: upload-release-asset
#   uses: actions/upload-release-asset@v1
#   env:
#     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#   with:
#     upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
#     asset_path: ./css/build.css
#     asset_name: vanilla.css
#     asset_content_type: text/css

#   python:
#     runs-on: ubuntu-latest
#     steps:
#     - uses: actions/checkout@v2
#     - name: Set up Python 3.x
#       uses: actions/setup-python@v1
#       with:
#         python-version: '3.x' # Semantic version range syntax or exact version of a Python version
#     # You can test your matrix by printing the current Python version
#     - name: Display Python version
#       run: python -c "import sys; print(sys.version)"
#     - name: Install pip dependencies
#       run: pip3 install -r requirements.txt
#     - name: Run server
#       run: ./entrypoint 0.0.0.0:8666 &
#     - run: sleep 5
#     - name: Install upload-assets
#       run: sudo snap install upload-assets
#     - name: Run upload-assets
#       run: upload-assets
